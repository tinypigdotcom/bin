#!/usr/bin/perl
# Built from perl.t template
# purpose: build programs from template

#    Copyright (C) 2014  David M. Bradford
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your u_option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see https://www.gnu.org/licenses/gpl.txt
#
#    The author, David M. Bradford, can be contacted at:
#    davembradford@gmail.com


use 5.16.0;
use warnings FATAL => 'all';

use File::Basename;
use Getopt::Long;

our $VERSION = '0.0.4';

my $PROG = basename($0);
my $ERR_EXIT = 2;

sub usage_top {
    warn "Usage: $PROG [OPTION]...\n";
}

sub short_usage {
    usage_top();
    warn "Try '$PROG --help' for more information.\n";
}

sub errout {
    my $message = join( ' ', @_ );
    warn "$PROG: $message\n";
    short_usage();
    exit $ERR_EXIT;
}



sub usage {
    usage_top();
    warn <<EOF;
build programs from template
Example: $PROG spiffy.s.pl

  -h, --help    display this help text and exit
  -v, --version display version information and exit

EOF
    return;
}

sub do_short_usage {
    short_usage();
    exit $ERR_EXIT;
}

sub version {
    warn "$PROG $VERSION\n";
    return;
}

my $h        = 0;
my $help     = 0;
my $version  = 0;


Getopt::Long::Configure ("bundling");

my %options = (
    "help"   => \$help,
    "version" => \$version,

);

# Explicitly add single letter version of each option to allow bundling
my ($key, $value);
my %temp = %options;
while (($key,$value) = each %temp) {
    my $letter = $key;
    $letter =~ s/(\w)\w*/$1/;
    $options{$letter} = $value;
}
# Fix-ups from previous routine
$options{h} = \$h;

GetOptions(%options) or errout("Error in command line arguments");

if    ($help)     { usage(); exit    }
elsif ($h)        { do_short_usage() }
elsif ($version)  { version(); exit  }


use 5.16.0;

use Carp;
use Data::Dumper;
use IO::File;
use Text::Template;

my $error = '';

sub my_broken {
   my %args = @_;
   my $err_ref = $args{arg};
   my $error = $args{error};
   chomp $error;
   $$err_ref = "ERROR: $error in:\n$args{text}";
   return undef;
}

my $ext;

if ( !@ARGV ) {
    do_short_usage();
}

my $infile = shift @ARGV;
my $outfile = $infile;

if ( $outfile =~ /\.s\.([^.]*)$/ ) {
    $ext = $1;
}

if ( ! -f "$ext.t" ) {
    errout("template $ext.t not found");
}

if ( $outfile =~ s/\.s\.${ext}$/\.${ext}/ ) {
}
else {
    $outfile .= ".${ext}";
}

my $VAR1;
sub dump_read {
    my $ifh = IO::File->new($infile, '<');
    croak if (!defined $ifh);

    my $contents;
    my $line = 1;
    while (<$ifh>) {
        chomp;
        if ( $line++ == 1 ) {
            next if /^#!/;
        }
        s/^#\s*<-\s*//;
        if ( !/\s*#->$/ ) {
            $contents .= "$_\n";
        }
    }
    $ifh->close;

    my $data = eval $contents; ## no critic
    if ( !defined $data ) {
        croak "failed eval of dump";
    }
    return;
}

my $open_delimiter  = '[<';
my $close_delimiter = '>]';

my $license_template = Text::Template->new(
    SOURCE     => 'LICENSE.t',
    DELIMITERS => [ $open_delimiter, $close_delimiter ],
) or die "Couldn't construct template: $Text::Template::ERROR";

my $year = sprintf("%04s",(localtime(time))[5] + 1900);
my %license_vars = ( year => $year );

my $license_result = $license_template->fill_in(
    PREPEND    => q{
        use strict;
        use vars qw( $year );
    },
    BROKEN     => \&my_broken,
    BROKEN_ARG => \$error,
    HASH       => \%license_vars,
);

if ($error) {
    die "$error\n";
}

if (! defined $license_result) {
    die "Couldn't fill in license template: $Text::Template::ERROR";
}

my $template = Text::Template->new(
    SOURCE     => "${ext}.t",
    DELIMITERS => [ $open_delimiter, $close_delimiter ],
) or die "Couldn't construct template: $Text::Template::ERROR";

dump_read();
my %vars = %$VAR1;
$vars{LICENSE}=$license_result;

my $result = $template->fill_in(
     BROKEN     => \&my_broken,
     BROKEN_ARG => \$error,
     PREPEND    => q{
         use strict;
         use vars qw( $exit $PROG $purpose $LICENSE $VERSION $params $example
         $CODE $long_opts $out $single_keys $switch_max_len $top_comments_block
         @long_opts @options );
     },
    HASH => \%vars,
);

if ($error) {
    die "$error\n";
}

if (! defined $result) {
    die "Couldn't fill in template: $Text::Template::ERROR";
}

if ( $vars{target} ) {
    $outfile = $vars{target};
}

my $ofh = IO::File->new($outfile, '>');
die "can't create $outfile: $!" if (!defined $ofh);

print $ofh "$result";
$ofh->close;

my $mode = 0700; chmod $mode, $outfile;

