#!/usr/bin/perl

# TODO
# * Implement word option
# * Differentiate title and allow for title search
# * allow input from file

use strict;
use warnings FATAL => 'all';

use Data::Dumper;
use Getopt::Long;
use IO::File;

my $nf = $ENV{NOTEFILES} || "$ENV{HOME}/info/notes.txt";
my @notefiles = split ':', $nf;

our $VERSION = '0.4';

my $title      = '';
my $edit       =  0;
my $word       =  0;
my $add        =  0;
my $help       =  0;

my $separator = "%%%\n";

GetOptions(
    "title=s" => \$title,
    "word"    => \$word,
    "add"     => \$add,
    "help"    => \$help,
    "edit"    => \$edit,
) or die("Error in command line arguments\n");

sub usage {
    return <<EOF;
Usage: note [OPTION]... PATTERN...
Add or retrieve a note
Example: note lawnmower

Flags for add:
-a, --add       Add a note
-t, --title     Title for the note being added

Flags for search:
-w, --word      Only find if PATTERN is a word

Other flags:
-e, --edit      Edit the notes file
EOF
}

sub errout {
}

sub edit_notes {
    my $editor = $ENV{EDITOR} || 'vim';
    system("$editor $notefiles[0]");
}

sub search_note {
    my (@patterns) = @_;

    my @notes;
    for my $file (@notefiles) {
        my $ifh = IO::File->new( $file, '<' );
        die if ( !defined $ifh );

        my $contents = do { local $/; <$ifh> };

        $ifh->close;
        push @notes, split(/^$separator/m, $contents);
    }

    my %matches;
    OUTER: for (@notes) {
        for my $pattern (@patterns) {
            next OUTER unless /$pattern/i;
        }
        s/^/  /mg;
        $matches{$_}++;
    }
    my $output_separator = '+' . '=' x 78 . "\n|\n";
    if (%matches) {
        for my $match (keys %matches) {
            print $output_separator, $match;

            my $cfh = IO::File->new('/dev/clipboard', '>');

            if (defined $cfh) {
                print $cfh "$match";
                $cfh->close;
            }
        }
    }
    else {
        print "No match.\n";
    }
}

sub add_note {
    print "Make note:\n";

    my $note;
    while (<STDIN>) {
        $note .= $_;
    }

    my $ofh = IO::File->new( $notefiles[0], '>>' );
    die if ( !defined $ofh );

    print $ofh "${separator}${note}\n";
    $ofh->close;
}

sub main {
    my (@patterns) = @_;

    if ($help) {
        die usage();
    }
    elsif ($edit) {
        edit_notes();
    }
    elsif (@patterns) {
        search_note(@patterns);
    }
    elsif ($add) {
        add_note();
    }
    else {
        die usage();
    }
    return;
}

my $rc = ( main(@ARGV) || 0 );

exit $rc;

