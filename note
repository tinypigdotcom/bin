#!/usr/bin/perl
# purpose: functional (vs class) template

use strict;
use warnings FATAL => 'all';

use Data::Dumper;
use Getopt::Long;
use IO::File;

our $VERSION = '0.2';

my $title  = '';
my $edit;
GetOptions ("t=s" => \$title,
            "e"   => \$edit)
or die("Error in command line arguments\n");

my $notefile = "$ENV{HOME}/info/notes.txt";
my $separator = '%%%';

sub edit_notes {
    my $editor = $ENV{EDITOR} || 'vim';
    system("$editor $notefile");
}

sub search_note {
    my ($pattern) = @_;

    my $ifh = IO::File->new($notefile, '<');
    die if (!defined $ifh);

    my $contents = do { local $/; <$ifh> };

    $ifh->close;

    my @notes = split /^%%%\n/m, $contents;

    my @lines;
    for (@notes) {
        if ( /$pattern/i ) {
            s/^\n//;
            s/\n$//;
            push @lines, "$_";
        }
    }
    my $separator = '-' x 79;
    if ( @lines ) {
        print "\n",
            join("\n$separator\n\n",@lines),
            "\n";
    }
    else {
        print "No match.\n";
    }
}

sub make_note {
    print "Make note:\n";

    my $note;
    while (<STDIN>) {
        $note .= $_;
    }

    my $ofh = IO::File->new($notefile, '>>');
    die if (!defined $ofh);

    print $ofh "$separator\n";
    print $ofh "$note\n";
    $ofh->close;
}

sub main {
    my ($pattern) = @_;

    if ( $edit ) {
        edit_notes();
    }
    elsif ( $pattern ) {
        search_note($pattern);
    }
    else {
        make_note();
    }
    return;
}

my $rc = ( main(@ARGV) || 0 );

exit $rc;

